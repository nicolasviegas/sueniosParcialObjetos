class Persona{
	var edad
	var carrerasAEstudiar = []
	var carrerasCompletadas = []
	const plataAGanar
	var lugaresAViajar = []
	var cantDeHijos = 0
	
	const suenios = []
	
	
	method tieneHijos() = cantDeHijos > 0
	
	method agregarHijos(cantidad){
		cantDeHijos += cantidad
	}
	
	method viajarA(destino){
		lugaresAViajar.add(destino)
	}
	
	method quiereEstudiar(carrera){
		carrerasAEstudiar.contains(carrera)
	}
	
	method carrerasCompletas(carrera){
		carrerasCompletadas.contains(carrera)
	}
	
	method completarCarrera(carrera){
		carrerasCompletadas.add(carrera)
	}
	
	method cumplir(suenio){
		if(!self.sueniosPendientes().contains(suenio)){
		//	error.throwExceptionWithMessage()
		 throw new Exception(message = "El sueño no está pendiente")
		}
		suenio.cumplir(self)
	}
	
	method sueniosPendientes() = suenios.filter{suenio => suenio.estaPendiente()}
}

class Suenio{
	var cumplido = false
	var felicidonios = 0
	
	method estaPendiente() = !cumplido
	
	method cumplir(persona){
		self.validar(persona)
		self.realizar(persona)
		self.cumplir(persona)
		persona.sumarFelicidad(felicidonios)
	}
	
	method cumplir(){
		cumplido = true
	}
	method validar(param1) {
		//TODO: Autogenerated Code ! 
	}
	method realizar(param1) {
		//TODO: Autogenerated Code ! 
	}
}

class AdoptarHijo inherits Suenio{
	const hijosAAdoptar
	
	override method validar(persona){
		if(persona.tieneHijos()){
			throw new Exception(message = "No se puede adoptar si ya tiene hijo")
		}
	}
	
	override method realizar(persona){
		persona.agregarHijos(hijosAAdoptar)
	}
}

class Viajar inherits Suenio{
	const destino
	
	override method realizar(persona){
		persona.viajarA(destino)
	}	
}

class Recibirse inherits Suenio{
	const carrera
	
	override method validar(persona){
		if(!persona.quiereEstudiar(carrera)){
			throw new Exception(message = "No quiere estudiar esta carrera")
		}
		
		if(persona.carrerasCompletas(carrera)){
			throw new Exception(message = "No quiere estudiar una carrera ya terminada")
		}
	}
	
	override method realizar(persona){
		persona.completarCarrera(carrera)
	}
}

object ingEnSist{}
object facha{}
object hola{}
object chaco{
	
}
const nico = new Persona(
	edad = 21,
	carrerasAEstudiar = [ingEnSist,facha],
	carrerasCompletadas = [hola],
	plataAGanar = 200,	
	lugaresAViajar = [chaco],
	cantDeHijos = 0
)